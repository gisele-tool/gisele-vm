grammar Gisele::VM::Bytecode::Grammar::Parser

  rule file
    ((trailing_space block)+ end_of_file?){
      [:gvm] + self[:block].map{|x| x.value}
    }
  end

  rule end_of_file
    trailing_space ('__END__' .*)?
  end

  rule block
    (label (spacing instruction)+){
      [:block, self[:label].first.value] + self[:instruction].map{|x| x.value}
    }
  end

  rule instruction
    (opcode (spaces arglist)? spacing (eol_comment | eol)){
      [self[:opcode].first.value] + Array(self[:arglist].map{|x| x.value}.first)
    }
  end

  rule arglist
    (arg (spacing ',' spacing arg)*){ self[:arg].map{|x| x.value} }
  end

  rule opcode
    ([a-z]+){ strip.to_sym }
  end

  rule label
      ([0-9]+ ':'){ strip[0...-1].to_i }
    | ([a-zA-Z0-9_-]+ ":"){ strip[0...-1].to_sym }
  end

  rule arg
    boolean | int | symbol | string | constant | array | hash
  end

  rule boolean
    ('true' | 'false'){ strip == 'true' }
  end

  rule int
   ( [\-]? '0' | [\-]? [1-9] [0-9]*){ strip.to_i }
  end

  rule symbol
    (':' symbol_chars){ strip[1..-1].to_sym }
  end

  rule string
      (['] (!['] .)* [']){ strip[1...-1] }
    | (["] (!["] .)* ["]){ strip[1...-1] }
  end

  rule constant
    ([A-Z][A-Za-z]* ('::' [A-Z][A-Za-z]*)*){
      strip.split('::').inject(::Kernel){|cur,c| cur.const_get(c)}
    }
  end

  rule array
      ('[' spacing arglist spacing ']'){ self[:arglist].last.value }
    | ('[' spacing ']'){ [] }
  end

  rule hash
      ('{' spacing hash_entries spacing '}'){ Hash[self[:hash_entries].last.value] }
    | ('{' spacing '}'){ Hash.new }
  end

  rule hash_entries
    (hash_entry (spacing ',' spacing hash_entry)*){ self[:hash_entry].map{|x| x.value} }
  end

  rule hash_entry
    (symbol_chars ':' spacing arg){
      [ self[:symbol_chars].last.value, self[:arg].last.value ]
    } |
    (':' symbol_chars spacing '=>' spacing arg){
      [ self[:symbol_chars].last.value, self[:arg].last.value ]
    }
  end

  rule symbol_chars
    ([a-zA-Z] [a-zA-Z0-9_]*){ strip.to_sym }
  end

  rule trailing_space
    (eol_comment | spaces | [\n])*
  end

  rule eol_comment
    "#" (![\n] .)* eol
  end

  rule spaces
    space+
  end

  rule spacing
    space*
  end

  rule space
    [ \t]
  end

  rule eol
    [\n] | !.
  end

end
